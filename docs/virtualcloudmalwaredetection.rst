Virtual/Cloud malware based detection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Nowadays Data centers manage hundreds of virtual machines/networks, On the following example we will configure the system for monitor malware domains on different virtual networks. Lets see how works.


We define a callback function for detection and send and alarm througt syslog

.. code:: python

  def malware_dns_callback(flow):

    d = flow.dns_info
    if (d):
      syslog.syslog(syslog.LOG_ERR, 
        "Malware on ip %s domain %d network id %d" % (flow.src_ip,d.domain_name,flow.tag))


We use a external list of malware domains and add to a DomainNameManager class in the same way as the example of the mobile malware. On the other hand, we also create a list of common domains that we dont want to track.

.. code:: python

  def loadUnwantedDomains():

    dm = pyaiengine.DomainNameManager()
    
    dom = pyaiengine.DomainName("Facebook",".facebook.com")
    dm.add_domain_name(dom)
    dom = pyaiengine.DomainName("Google",".google.com")
    dm.add_domain_name(dom)
    # Add more common domains

    return dm

Create a new virtual stack and connect them.

.. code:: python

    st = pyaiengine.StackVirtual()

Allocate the maximum number of flows on the UDP stack.

.. code:: python

    st.udp_flows = 1638400

Load the malware domains and the unwanted domains and assign them to the stack

.. code:: python

    st.set_domain_name_manager(loadBadDomains(),"DNSProtocol")
    st.set_domain_name_manager(loadUnwantedDomains(),"DNSProtocol", False)

Open the network device and run the engine

.. code:: python

    with pyaiengine.PacketDispatcher("eth0") as pd:
        pd.stack = st
        pd.run()


